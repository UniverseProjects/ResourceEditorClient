/**
 * UPResourceEditor
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ostangenberg@universeprojects.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ResourceLibraryApi {

    protected basePath = 'https://www.universeprojects.com/api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * @summary Creates a new resource-library
     */
    public createResourceLibrary(extraHttpRequestParams?: any): Observable<models.ResourceLibrary> {
        return this.createResourceLibraryWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Deletes the library
     * @param libraryId ID of the library
     */
    public deleteResourceLibrary(libraryId: number, extraHttpRequestParams?: any): Observable<models.InlineResponse200> {
        return this.deleteResourceLibraryWithHttpInfo(libraryId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Exports an h5l-version of the resource-library
     * @param libraryId ID of the library
     * @param tag 
     */
    public exportH5l(libraryId: number, tag?: Array<string>, extraHttpRequestParams?: any): Observable<string> {
        return this.exportH5lWithHttpInfo(libraryId, tag, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Imports resources from an H5L file on GCS. Uses the path as tags for the images/audio
     * @param libraryId ID of the library
     * @param treePath Path to H5l
     * @param excludeTag 
     */
    public importLibraryFromGcsH5l(libraryId: number, treePath: string, excludeTag?: Array<string>, extraHttpRequestParams?: any): Observable<string> {
        return this.importLibraryFromGcsH5lWithHttpInfo(libraryId, treePath, excludeTag, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * 
     * @summary Lists resource-libraries
     */
    public listResourceLibraries(extraHttpRequestParams?: any): Observable<Array<models.ResourceLibrary>> {
        return this.listResourceLibrariesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Creates a new resource-library
     * 
     */
    public createResourceLibraryWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Deletes the library
     * 
     * @param libraryId ID of the library
     */
    public deleteResourceLibraryWithHttpInfo(libraryId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}'
                    .replace('${' + 'libraryId' + '}', String(libraryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling deleteResourceLibrary.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Exports an h5l-version of the resource-library
     * 
     * @param libraryId ID of the library
     * @param tag 
     */
    public exportH5lWithHttpInfo(libraryId: number, tag?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/exportH5l'
                    .replace('${' + 'libraryId' + '}', String(libraryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling exportH5l.');
        }
        if (tag) {
            tag.forEach((element) => {
                queryParameters.append('tag', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Imports resources from an H5L file on GCS. Uses the path as tags for the images/audio
     * 
     * @param libraryId ID of the library
     * @param treePath Path to H5l
     * @param excludeTag 
     */
    public importLibraryFromGcsH5lWithHttpInfo(libraryId: number, treePath: string, excludeTag?: Array<string>, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/importFromGcsH5l'
                    .replace('${' + 'libraryId' + '}', String(libraryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling importLibraryFromGcsH5l.');
        }
        // verify required parameter 'treePath' is not null or undefined
        if (treePath === null || treePath === undefined) {
            throw new Error('Required parameter treePath was null or undefined when calling importLibraryFromGcsH5l.');
        }
        if (treePath !== undefined) {
            queryParameters.set('treePath', <any>treePath);
        }

        if (excludeTag) {
            excludeTag.forEach((element) => {
                queryParameters.append('excludeTag', <any>element);
            })
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Lists resource-libraries
     * 
     */
    public listResourceLibrariesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
