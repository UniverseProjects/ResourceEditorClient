/**
 * UPResourceEditor
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ostangenberg@universeprojects.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ImageApi {

    protected basePath = 'https://www.universeprojects.com/api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     *
     * @summary Delete image for path
     * @param libraryId ID of the library
     * @param path Image path to delete
     */
    public deleteImage(libraryId: number, path: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteImageWithHttpInfo(libraryId, path, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Find image with filter
     * @param libraryId ID of the library
     * @param path directory-path
     * @param tag
     * @param limit limit amount of entities returned
     * @param cursor cursor to fetch a batch (for paging)
     */
    public findImage(libraryId: number, path: string, tag?: Array<string>, limit?: number, cursor?: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2001> {
        return this.findImageWithHttpInfo(libraryId, path, tag, limit, cursor, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Generates an upload-URL for the path
     * @param libraryId ID of the library
     * @param path directory path to upload to
     */
    public generateImageUpload(libraryId: number, path: string, extraHttpRequestParams?: any): Observable<models.InlineResponse2002> {
        return this.generateImageUploadWithHttpInfo(libraryId, path, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Load image for path
     * @param libraryId ID of the library
     * @param path Image path to load
     */
    public loadImage(libraryId: number, path: string, extraHttpRequestParams?: any): Observable<models.Image> {
        return this.loadImageWithHttpInfo(libraryId, path, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @summary Update image for path
     * @param libraryId ID of the library
     * @param path Image path to update
     * @param body
     */
    public updateImage(libraryId: number, path: string, body: models.Image, extraHttpRequestParams?: any): Observable<models.Image> {
        return this.updateImageWithHttpInfo(libraryId, path, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Delete image for path
     *
     * @param libraryId ID of the library
     * @param path Image path to delete
     */
    public deleteImageWithHttpInfo(libraryId: number, path: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/image/${path}'
                    .replace('${' + 'libraryId' + '}', String(libraryId))
                    .replace('${' + 'path' + '}', String(path));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling deleteImage.');
        }
        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling deleteImage.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Find image with filter
     *
     * @param libraryId ID of the library
     * @param path directory-path
     * @param tag
     * @param limit limit amount of entities returned
     * @param cursor cursor to fetch a batch (for paging)
     */
    public findImageWithHttpInfo(libraryId: number, path: string, tag?: Array<string>, limit?: number, cursor?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/images/${path}'
                    .replace('${' + 'libraryId' + '}', String(libraryId))
                    .replace('${' + 'path' + '}', String(path));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling findImage.');
        }
        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling findImage.');
        }
        if (tag) {
            tag.forEach((element) => {
                queryParameters.append('tag', <any>element);
            })
        }

        if (limit !== undefined) {
            queryParameters.set('limit', <any>limit);
        }

        if (cursor !== undefined) {
            queryParameters.set('cursor', <any>cursor);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Generates an upload-URL for the path
     *
     * @param libraryId ID of the library
     * @param path directory path to upload to
     */
    public generateImageUploadWithHttpInfo(libraryId: number, path: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/generateImageUpload/${path}'
                    .replace('${' + 'libraryId' + '}', String(libraryId))
                    .replace('${' + 'path' + '}', String(path));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling generateImageUpload.');
        }
        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling generateImageUpload.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Load image for path
     *
     * @param libraryId ID of the library
     * @param path Image path to load
     */
    public loadImageWithHttpInfo(libraryId: number, path: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/image/${path}'
                    .replace('${' + 'libraryId' + '}', String(libraryId))
                    .replace('${' + 'path' + '}', String(path));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling loadImage.');
        }
        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling loadImage.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update image for path
     *
     * @param libraryId ID of the library
     * @param path Image path to update
     * @param body
     */
    public updateImageWithHttpInfo(libraryId: number, path: string, body: models.Image, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/library/${libraryId}/image/${path}'
                    .replace('${' + 'libraryId' + '}', String(libraryId))
                    .replace('${' + 'path' + '}', String(path));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'libraryId' is not null or undefined
        if (libraryId === null || libraryId === undefined) {
            throw new Error('Required parameter libraryId was null or undefined when calling updateImage.');
        }
        // verify required parameter 'path' is not null or undefined
        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling updateImage.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateImage.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
